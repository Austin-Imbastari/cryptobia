{"ast":null,"code":"import _regeneratorRuntime from \"/Users/yungimba/Desktop/dev/cryptofusion/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/yungimba/Desktop/dev/cryptofusion/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { nftsData } from '../backEnd/scripts/nftsData.js';\nimport Contract from '../backEnd/abis/NFT.json';\nimport Web3 from 'web3';\nimport { web3Loaded, contractLoaded, web3NetworkLoaded, web3AccountLoaded, web3BalanceLoaded, metadataLoaded, nftStateLoaded } from './actions';\nexport var loadWeb3 = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n    var web3;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n\n            if (!(typeof window.ethereum !== 'undefined')) {\n              _context.next = 6;\n              break;\n            }\n\n            window.ethereum.autoRefreshOnNetworkChange = false;\n            web3 = new Web3(window.ethereum);\n            dispatch(web3Loaded(web3));\n            return _context.abrupt(\"return\", web3);\n\n          case 6:\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            console.log('Error, load Web3: ', _context.t0);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 8]]);\n  }));\n\n  return function loadWeb3(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var loadNetwork = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch, web3) {\n    var network;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return web3.eth.net.getNetworkType();\n\n          case 3:\n            network = _context2.sent;\n            network = network.charAt(0).toUpperCase() + network.slice(1);\n            dispatch(web3NetworkLoaded(network));\n            return _context2.abrupt(\"return\", network);\n\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2[\"catch\"](0);\n            dispatch(web3NetworkLoaded('Wrong network'));\n            console.log('Error, load network: ', _context2.t0);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 9]]);\n  }));\n\n  return function loadNetwork(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var loadAccount = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch, web3) {\n    var accounts, account;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return web3.eth.getAccounts();\n\n          case 3:\n            accounts = _context3.sent;\n            _context3.next = 6;\n            return accounts[0];\n\n          case 6:\n            account = _context3.sent;\n\n            if (!(typeof account !== 'undefined')) {\n              _context3.next = 12;\n              break;\n            }\n\n            dispatch(web3AccountLoaded(account));\n            return _context3.abrupt(\"return\", account);\n\n          case 12:\n            dispatch(web3AccountLoaded(null));\n            return _context3.abrupt(\"return\", null);\n\n          case 14:\n            _context3.next = 19;\n            break;\n\n          case 16:\n            _context3.prev = 16;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log('Error, load account: ', _context3.t0);\n\n          case 19:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[0, 16]]);\n  }));\n\n  return function loadAccount(_x4, _x5) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var loadBalance = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch, web3, account) {\n    var etherBalance;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return web3.eth.getBalance(account);\n\n          case 3:\n            etherBalance = _context4.sent;\n            dispatch(web3BalanceLoaded((etherBalance / Math.pow(10, 18)).toFixed(5)));\n            _context4.next = 10;\n            break;\n\n          case 7:\n            _context4.prev = 7;\n            _context4.t0 = _context4[\"catch\"](0);\n            console.log('Error, load balance: ', _context4.t0);\n\n          case 10:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[0, 7]]);\n  }));\n\n  return function loadBalance(_x6, _x7, _x8) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var loadContract = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dispatch, web3, netId) {\n    var contract;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            contract = new web3.eth.Contract(Contract.abi, Contract.networks[netId].address);\n            dispatch(contractLoaded(contract));\n            return _context5.abrupt(\"return\", contract);\n\n          case 6:\n            _context5.prev = 6;\n            _context5.t0 = _context5[\"catch\"](0);\n            window.alert('Wrong network!');\n            console.log('Error, load contract: ', _context5.t0);\n            dispatch(contractLoaded(null));\n            return _context5.abrupt(\"return\", null);\n\n          case 12:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, null, [[0, 6]]);\n  }));\n\n  return function loadContract(_x9, _x10, _x11) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var update = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(dispatch) {\n    var account, web3, netId, contract;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.prev = 0;\n            _context6.next = 3;\n            return loadWeb3(dispatch);\n\n          case 3:\n            web3 = _context6.sent;\n            _context6.next = 6;\n            return loadNetwork(dispatch, web3);\n\n          case 6:\n            _context6.next = 8;\n            return loadAccount(dispatch, web3);\n\n          case 8:\n            account = _context6.sent;\n            _context6.next = 11;\n            return web3.eth.net.getId();\n\n          case 11:\n            netId = _context6.sent;\n            _context6.next = 14;\n            return loadContract(dispatch, web3, netId);\n\n          case 14:\n            contract = _context6.sent;\n            _context6.next = 17;\n            return loadNftData(dispatch, contract);\n\n          case 17:\n            _context6.next = 19;\n            return loadNftState(dispatch, contract);\n\n          case 19:\n            if (!(account && contract)) {\n              _context6.next = 22;\n              break;\n            }\n\n            _context6.next = 22;\n            return loadBalance(dispatch, web3, account);\n\n          case 22:\n            _context6.next = 27;\n            break;\n\n          case 24:\n            _context6.prev = 24;\n            _context6.t0 = _context6[\"catch\"](0);\n            console.log('Error, update data: ', _context6.t0);\n\n          case 27:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6, null, [[0, 24]]);\n  }));\n\n  return function update(_x12) {\n    return _ref6.apply(this, arguments);\n  };\n}(); //get NFTs data from nftsData.js generated while minting\n\nexport var loadNftData = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(dispatch, contract) {\n    var totalSupply, uri;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.prev = 0;\n            _context7.next = 3;\n            return contract.methods.totalSupply().call();\n\n          case 3:\n            totalSupply = _context7.sent;\n            _context7.next = 6;\n            return contract.methods.tokenURI(1).call();\n\n          case 6:\n            uri = _context7.sent;\n            fetch(uri).then(function (res) {\n              return res.json();\n            }).then(function (result) {\n              if (result.image === nftsData[0].image && Number(totalSupply) === nftsData.length) {\n                dispatch(metadataLoaded(nftsData));\n              }\n            });\n            console.log(nftsData);\n            _context7.next = 14;\n            break;\n\n          case 11:\n            _context7.prev = 11;\n            _context7.t0 = _context7[\"catch\"](0);\n            console.log('Error, load images', _context7.t0);\n\n          case 14:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7, null, [[0, 11]]);\n  }));\n\n  return function loadNftData(_x13, _x14) {\n    return _ref7.apply(this, arguments);\n  };\n}(); //get data about NFT's sold state\n\nexport var loadNftState = /*#__PURE__*/function () {\n  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(dispatch, contract) {\n    var tab, totalSupply, i, state;\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.prev = 0;\n            tab = [];\n            _context8.next = 4;\n            return contract.methods.totalSupply().call();\n\n          case 4:\n            totalSupply = _context8.sent;\n            i = 0;\n\n          case 6:\n            if (!(i < totalSupply)) {\n              _context8.next = 22;\n              break;\n            }\n\n            _context8.next = 9;\n            return contract.methods.sold(i).call();\n\n          case 9:\n            state = _context8.sent;\n\n            if (!state) {\n              _context8.next = 18;\n              break;\n            }\n\n            _context8.t0 = tab;\n            _context8.next = 14;\n            return contract.methods.ownerOf(i).call();\n\n          case 14:\n            _context8.t1 = _context8.sent;\n\n            _context8.t0.push.call(_context8.t0, _context8.t1);\n\n            _context8.next = 19;\n            break;\n\n          case 18:\n            tab.push(state);\n\n          case 19:\n            i++;\n            _context8.next = 6;\n            break;\n\n          case 22:\n            dispatch(nftStateLoaded(tab));\n            _context8.next = 28;\n            break;\n\n          case 25:\n            _context8.prev = 25;\n            _context8.t2 = _context8[\"catch\"](0);\n            console.log('Error, load NFT state', _context8.t2);\n\n          case 28:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8, null, [[0, 25]]);\n  }));\n\n  return function loadNftState(_x15, _x16) {\n    return _ref8.apply(this, arguments);\n  };\n}();\nexport var buyNft = /*#__PURE__*/function () {\n  var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(dispatch, id, price) {\n    var web3, account, netId, contract;\n    return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            _context10.prev = 0;\n            _context10.next = 3;\n            return loadWeb3(dispatch);\n\n          case 3:\n            web3 = _context10.sent;\n            _context10.next = 6;\n            return loadNetwork(dispatch, web3);\n\n          case 6:\n            _context10.next = 8;\n            return loadAccount(dispatch, web3);\n\n          case 8:\n            account = _context10.sent;\n            _context10.next = 11;\n            return web3.eth.net.getId();\n\n          case 11:\n            netId = _context10.sent;\n            _context10.next = 14;\n            return loadContract(dispatch, web3, netId);\n\n          case 14:\n            contract = _context10.sent;\n            _context10.next = 17;\n            return contract.methods.buy(id).send({\n              from: account,\n              value: price\n            }).on('receipt', /*#__PURE__*/function () {\n              var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(r) {\n                return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n                  while (1) {\n                    switch (_context9.prev = _context9.next) {\n                      case 0:\n                        update(dispatch);\n                        window.alert(\"Congratulations, you've received NFT with ID: \".concat(id, \"\\nAddress: \").concat(Contract.networks[netId].address));\n\n                      case 2:\n                      case \"end\":\n                        return _context9.stop();\n                    }\n                  }\n                }, _callee9);\n              }));\n\n              return function (_x20) {\n                return _ref10.apply(this, arguments);\n              };\n            }()).on('error', function (error) {\n              console.error(error);\n              window.alert(\"There was an error!\");\n            });\n\n          case 17:\n            _context10.next = 22;\n            break;\n\n          case 19:\n            _context10.prev = 19;\n            _context10.t0 = _context10[\"catch\"](0);\n            console.log('Error, buy NFT', _context10.t0);\n\n          case 22:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10, null, [[0, 19]]);\n  }));\n\n  return function buyNft(_x17, _x18, _x19) {\n    return _ref9.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/yungimba/Desktop/dev/cryptofusion/src/store/interactions.js"],"names":["nftsData","Contract","Web3","web3Loaded","contractLoaded","web3NetworkLoaded","web3AccountLoaded","web3BalanceLoaded","metadataLoaded","nftStateLoaded","loadWeb3","dispatch","window","ethereum","autoRefreshOnNetworkChange","web3","console","log","loadNetwork","eth","net","getNetworkType","network","charAt","toUpperCase","slice","loadAccount","getAccounts","accounts","account","loadBalance","getBalance","etherBalance","toFixed","loadContract","netId","contract","abi","networks","address","alert","update","getId","loadNftData","loadNftState","methods","totalSupply","call","tokenURI","uri","fetch","then","res","json","result","image","Number","length","tab","i","sold","state","ownerOf","push","buyNft","id","price","buy","send","from","value","on","r","error"],"mappings":"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","sourcesContent":["import { nftsData } from '../backEnd/scripts/nftsData.js'\r\nimport Contract from '../backEnd/abis/NFT.json'\r\nimport Web3 from 'web3'\r\nimport {\r\n  web3Loaded,\r\n  contractLoaded,\r\n  web3NetworkLoaded,\r\n  web3AccountLoaded,\r\n  web3BalanceLoaded,\r\n  metadataLoaded,\r\n  nftStateLoaded\r\n} from './actions'\r\n\r\nexport const loadWeb3 = async (dispatch) => {\r\n  try{\r\n    if(typeof window.ethereum!=='undefined'){\r\n      window.ethereum.autoRefreshOnNetworkChange = false;\r\n      const web3 = new Web3(window.ethereum)\r\n      dispatch(web3Loaded(web3))\r\n      return web3\r\n    }\r\n  } catch (e) {\r\n    console.log('Error, load Web3: ', e)\r\n  }\r\n}\r\n\r\nexport const loadNetwork = async (dispatch, web3) => {\r\n  try{\r\n    let network = await web3.eth.net.getNetworkType()\r\n    network = network.charAt(0).toUpperCase()+network.slice(1)\r\n    dispatch(web3NetworkLoaded(network))\r\n    return network\r\n  } catch (e) {\r\n    dispatch(web3NetworkLoaded('Wrong network'))\r\n    console.log('Error, load network: ', e)\r\n  }\r\n}\r\n\r\nexport const loadAccount = async (dispatch, web3) => {\r\n  try{\r\n    const accounts = await web3.eth.getAccounts()\r\n    const account = await accounts[0]\r\n    if(typeof account !== 'undefined'){\r\n      dispatch(web3AccountLoaded(account))\r\n      return account\r\n    } else {\r\n      dispatch(web3AccountLoaded(null))\r\n      return null\r\n    }\r\n  } catch (e) {\r\n    console.log('Error, load account: ', e)\r\n  }\r\n}\r\n\r\nexport const loadBalance = async (dispatch, web3, account) => {\r\n  try {\r\n    const etherBalance = await web3.eth.getBalance(account)\r\n    dispatch(web3BalanceLoaded((etherBalance/10**18).toFixed(5)))\r\n  } catch (e) {\r\n    console.log('Error, load balance: ', e)\r\n  }\r\n}\r\n\r\nexport const loadContract = async (dispatch, web3, netId) => {\r\n  try {\r\n    const contract = new web3.eth.Contract(Contract.abi, Contract.networks[netId].address)\r\n    dispatch(contractLoaded(contract))\r\n    return contract\r\n  } catch (e) {\r\n    window.alert('Wrong network!')\r\n    console.log('Error, load contract: ', e)\r\n    dispatch(contractLoaded(null))\r\n    return null\r\n  }\r\n}\r\n\r\nexport const update = async (dispatch) => {\r\n  try{\r\n    let account, web3, netId, contract\r\n\r\n    web3 = await loadWeb3(dispatch)\r\n    await loadNetwork(dispatch, web3)\r\n    account = await loadAccount(dispatch, web3)\r\n    netId = await web3.eth.net.getId()\r\n    contract = await loadContract(dispatch, web3, netId)\r\n  \r\n    await loadNftData(dispatch, contract)\r\n    await loadNftState(dispatch, contract)\r\n    if(account && contract){\r\n      await loadBalance(dispatch, web3, account)\r\n    }\r\n  } catch (e) {\r\n    console.log('Error, update data: ', e)\r\n  }\r\n}\r\n\r\n//get NFTs data from nftsData.js generated while minting\r\nexport const loadNftData = async (dispatch, contract) => {\r\n  try{\r\n    const totalSupply = await contract.methods.totalSupply().call()\r\n    const uri = await contract.methods.tokenURI(1).call()\r\n\r\n    fetch(uri)\r\n      .then(res => res.json())\r\n      .then(result => {\r\n        if(result.image===nftsData[0].image && Number(totalSupply)===nftsData.length){\r\n          dispatch(metadataLoaded(nftsData))\r\n        }\r\n      });\r\n      console.log(nftsData)\r\n  } catch (e) {\r\n    console.log('Error, load images', e)\r\n  }\r\n}\r\n\r\n//get data about NFT's sold state\r\nexport const loadNftState = async (dispatch, contract) => {\r\n  try{\r\n    const tab = []\r\n    const totalSupply = await contract.methods.totalSupply().call()\r\n\r\n    for(let i=0; i<totalSupply; i++){\r\n      const state = await contract.methods.sold(i).call()\r\n      if(state){\r\n        tab.push(await contract.methods.ownerOf(i).call()) //if sold, then add owner address\r\n      } else {\r\n        tab.push(state)\r\n      }\r\n    }\r\n    dispatch(nftStateLoaded(tab))\r\n  } catch (e) {\r\n    console.log('Error, load NFT state', e)\r\n  }\r\n}\r\n\r\nexport const buyNft = async (dispatch, id, price) => {\r\n  try{\r\n    const web3 = await loadWeb3(dispatch)\r\n    await loadNetwork(dispatch, web3)\r\n    const account = await loadAccount(dispatch, web3)\r\n    const netId = await web3.eth.net.getId()\r\n    const contract = await loadContract(dispatch, web3, netId)\r\n\r\n    await contract.methods.buy(id).send({from: account, value: price})\r\n      .on('receipt', async (r) => {\r\n        update(dispatch)\r\n        window.alert(`Congratulations, you've received NFT with ID: ${id}\\nAddress: ${Contract.networks[netId].address}`)\r\n      })\r\n      .on('error',(error) => {\r\n        console.error(error)\r\n        window.alert(`There was an error!`)\r\n      })\r\n  } catch (e){\r\n    console.log('Error, buy NFT', e)\r\n  }\r\n  \r\n}"]},"metadata":{},"sourceType":"module"}